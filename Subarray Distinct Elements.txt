// C++ program to calculate sum of lengths of subarrays
// of distinct elements.
#include<bits/stdc++.h>
using namespace std;

// Returns sum of lengths of all subarrays with distinct
// elements.
int sumoflength(int arr[], int n)
{
	// For maintaining distinct elements.
	unordered_set<int> s;

	// Initialize ending point and result
	int j = 0, ans = 0;

	// Fix starting point
	for (int i=0; i<n; i++)
	{
		// Find ending point for current subarray with
		// distinct elements.
		while (j < n && s.find(arr[j]) == s.end())
		{
			s.insert(arr[j]);
			j++;
		}

		// Calculating and adding all possible length
		// subarrays in arr[i..j]
		ans += ((j - i) * (j - i + 1))/2;

		// Remove arr[i] as we pick new starting point
		// from next
		s.erase(arr[i]);
	}

	return ans;
}

// Driven Code
int main()
{
	int arr[] = {1, 2, 3, 4};
	int n = sizeof(arr)/sizeof(arr[0]);
	cout << sumoflength(arr, n) << endl;
	return 0;
}
