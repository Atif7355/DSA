 int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        int arr[n*n];  // convert to 1-D array for easier access
        int c=0;
        int right=1;
        for(int i=n-1;i>=0;i--){
          
          if(right){
              
              for(int j=0;j<n;j++){
                  arr[c]=board[i][j];
                      c++;
              }
              
          }
            else{
                for(int j=n-1;j>=0;j--){
                  arr[c]=board[i][j];
                      c++;
              }
            }
            right = !right;  // for alternate traversal
        }
        queue<pair<int,int>>q;  // <node,level>
        q.push({1,0});  
        vector<int>vis(n*n,0);
        while(!q.empty()){  // normal bfs
            pair<int,int> node = q.front();
            q.pop();
            int curr = node.first;
            if(curr==n*n)  // if target reached return level
                return node.second;
            if(vis[curr-1]==0){
                vis[curr-1]=1;
            for(int i=1;i<=6;i++){  // exploring all possible 6 outcomes
                if(curr+i<=n*n){
                  //  cout<<curr+i<<' ';
                    if(arr[curr+i-1]==-1){  // if no snake and ladder
                        q.push({curr+i,node.second+1});
                    }
                    else{
                       // if(vis[arr[curr+i-1]-1]==0)
                        q.push({arr[curr+i-1],node.second+1});  // if snake and ladder
                    }
                }
            }
            }
        }
        return -1;  // not possible
    }
};