class Solution {
public:
 vector<int> topKFrequent(vector<int>& nums, int k) {

        unordered_map<int,int> m; //number and frequency

        for(int num: nums)

            m[num] += 1;

        

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;

        for(auto& it: m){

            if(q.size() < k){

                q.push({it.second,it.first});//Frequeny first, index second for later extraction

            }

            else{

                if(it.second > q.top().first) //Compare currnet number frequency to smallest frequency in heap

                {

                    q.pop();

                    q.push({it.second,it.first});//Frequency first, index second for later extraction

                }

            }

        }

        

        vector<int> res;

        int queue_size = q.size();

        //Get the numbers

        for(int i = 0; i < queue_size; ++i){

            res.push_back(q.top().second);

            q.pop();

        }

        return res;

    }
};