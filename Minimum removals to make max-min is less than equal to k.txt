// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

int removal(int a[], int n, int k)
{
	// Code here
	// Sort the Array; Time complexity:O(nlogn)
	sort(a, a + n);
	int diff= 0; // to store difference of max(a) and min(a)
	int ans = 0; // to store maximum length of array with length <=k

	// use sliding window to iterate array, maintaing two
	// pointers for desired subarray
	// which starting from index j and ending with index i
	for (int i = 0, j = 0; i < n; i++) {
		int diff = a[i] - a[j];
		// as array is already sorted, if difference exceeds
		// k we will move starting pointer forward
		while (i >= j && diff > k) {
			diff = a[i] - a[++j];
		}
		ans = max(ans, i - j + 1);
	}
	return n - ans;
}
// Driver Code
int main()
{
	int a[] = { 1, 3, 4, 9, 10, 11, 12, 17, 20 };
	int n = sizeof(a) / sizeof(a[0]);
	int k = 4;
	cout << removal(a, n, k);
	return 0;
}