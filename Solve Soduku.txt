class Solution 
{
    public:
    //Function to find a solved Sudoku. 
    bool issafe(int row, int col, int i, int grid[N][N]){
       for(int k =0; k<N; ++k) if(grid[row][k]==i || grid[k][col]==i) return false;
       int rs = row - (row%3), cs = col - (col%3);
       for(int k =0; k<3; ++k){
           for(int l =0; l<3; ++l) if(grid[rs+k][cs+l]==i)return false;
       }
       return true;
   }
   bool SolveSudoku(int grid[N][N])  
   { 
       // Your code here
       int col =-1, row =-1;
       bool flag = false;
       for(int i =0; i<N; ++i){
           for(int j =0; j<N; ++j){
               if(grid[i][j]==0){
                   row = i;
                   col =j;
                   flag = true;
                   break;
               }
           }
           if(flag) break;
       }
       if(!flag)return true;
       for(int i =1; i<=N; ++i){
           if(issafe(row, col, i, grid)){
               grid[row][col] = i;
               if(SolveSudoku(grid)) return true;
               grid[row][col] =0;
           }
       }
       return false;
   }
   
   //Function to print grids of the Sudoku.
   void printGrid (int grid[N][N]) 
   {
       // Your code here
       for(int i =0; i<N; ++i){
           for(int j =0; j<N; ++j) cout << grid[i][j] << " ";
       }
   }
};