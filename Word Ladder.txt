class Solution {
public:
    int n,destination;

    unordered_map<string,int> mp;

    vector<vector<int>> adj;

    

    int bfs(){

        vector<int> vis(n);

        

        queue<int> q;

        q.push(n-1);

        int ans = 1;

        

        while(!q.empty()){

            int sz = q.size();

            for(int i=0;i < sz;i++){

                int curr = q.front();

                vis[curr] = 1;

                if(curr == destination){

                    return ans;

                }

                q.pop();

                for(auto j:adj[curr]){

                    if(!vis[j]){

                        q.push(j);

                    }

                }

            }

            ans++;

        }

        return 0;

    }

    

    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {

        wordList.push_back(beginWord);

        n = wordList.size();

        adj = vector<vector<int>> (n);

        

        destination = -1;

        for(int i=0;i < n;i++){

            mp[wordList[i]] = i;

            if(wordList[i] == endWord){

                destination = i;

            }

        }

        if(destination == -1){

            return 0;

        }

        

        for(int i=0;i < n;i++){

            string word = wordList[i];

            for(int j=0;j < word.size();j++){

                char save = word[j];

                for(char ch = 'a';ch <= 'z';ch++){

                    word[j] = ch;

                    if(mp.count(word) and i != mp[word]){

                        adj[i].push_back(mp[word]);

                    }

                }

                word[j] = save;

            }

        }

        

        return bfs();

    }

};
